SYMBOLS {
    __STACKSIZE__: type = weak, value = $0010;   # 16 Bytes system stack
}

MEMORY {
    RAM: file = "", start = $0080, size = $0080 - __STACKSIZE__, define = yes;
    # Banked ROMs
    ROM0: file = %O, start = $1000, size = $1000;
    ROM1: file = %O, start = $3000, size = $1000;
    ROM2: file = %O, start = $5000, size = $1000;
    ROM3: file = %O, start = $7000, size = $1000;
    ROM4: file = %O, start = $9000, size = $1000;
    ROM5: file = %O, start = $B000, size = $1000;
    ROM6: file = %O, start = $D000, size = $1000;
    ROM7: file = %O, start = $F000, size = $1000;
}

SEGMENTS {
    ZEROPAGE: load = RAM,  type = zp;
    BSS:      load = RAM,  type = bss, optional = yes;
    FXZP:     load = RAM,  type = zp,  optional = yes;

    # Shared segments
    COMMON:   load = ROM0, type = ro,                 duplicate = ROM1, duplicate = ROM2, duplicate = ROM3, duplicate = ROM4, duplicate = ROM5, duplicate = ROM6, duplicate = ROM7;
    CODE:     load = ROM0, type = ro,                 duplicate = ROM1;
    RODATA:   load = ROM0, type = ro, optional = yes, duplicate = ROM1;

    # Initialized data to be copied into RAM will be stored in bank0
    DATA:     load = ROM0, type = rw, optional = yes, define = yes, run = RAM;

    # Per bank data segments
    CODE0:    load = ROM0, type = ro, optional = yes;
    RODATA0:  load = ROM0, type = ro, optional = yes;
    VECTORS0: load = ROM0, type = ro, start = $1FF4;
    CODE1:    load = ROM1, type = ro, optional = yes;
    RODATA1:  load = ROM1, type = ro, optional = yes;
    VECTORS1: load = ROM1, type = ro, start = $3FF4;
    CODE2:    load = ROM2, type = ro, optional = yes;
    RODATA2:  load = ROM2, type = ro, optional = yes, align = $100;
    VECTORS2: load = ROM2, type = ro, start = $5FF4;
    CODE3:    load = ROM3, type = ro, optional = yes;
    RODATA3:  load = ROM3, type = ro, optional = yes;
    VECTORS3: load = ROM3, type = ro, start = $7FF4;
    CODE4:    load = ROM4, type = ro, optional = yes, align = $100;
    RODATA4:  load = ROM4, type = ro, optional = yes;
    VECTORS4: load = ROM4, type = ro, start = $9FF4;
    CODE5:    load = ROM5, type = ro, optional = yes, align = $100;
    RODATA5:  load = ROM5, type = ro, optional = yes, align = $100;
    VECTORS5: load = ROM5, type = ro, start = $BFF4;
    CODE6:    load = ROM6, type = ro, optional = yes;
    RODATA6:  load = ROM6, type = ro, optional = yes;
    ROFONT:   load = ROM6, type = ro, optional = yes, align = $100;
    VECTORS6: load = ROM6, type = ro, start = $DFF4;
    STARTUP:  load = ROM7, type = ro;
    CODE7:    load = ROM7, type = ro, optional = yes;
    RODATA7:  load = ROM7, type = ro, optional = yes;
    VECTORS7: load = ROM7, type = ro, start = $FFF4;
}
