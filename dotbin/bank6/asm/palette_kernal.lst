ca65 V2.15
Main file   : bank6/asm/palette_kernal.s
Current file: bank6/asm/palette_kernal.s

000000r 1               .include "globals.inc"
000000r 2               .include "zeropage.inc"
000000r 3               ;
000000r 3               ; zeropage.inc
000000r 3               ;
000000r 3               ; (C) Copyright 2002-2012, Ullrich von Bassewitz (uz@cc65.org)
000000r 3               ;
000000r 3               
000000r 3               ; Assembler include file that imports the runtime zero page locations used
000000r 3               ; by the compiler, ready for usage in asm code.
000000r 3               
000000r 3               
000000r 3                       .globalzp       sp, sreg, regsave
000000r 3                       .globalzp       ptr1, ptr2, ptr3, ptr4
000000r 3                       .globalzp       tmp1, tmp2, tmp3, tmp4
000000r 3                       .globalzp       regbank
000000r 3               
000000r 3               ; The size of the register bank
000000r 3               regbanksize     = 6
000000r 3               
000000r 3               ; The total amount of zero page space used
000000r 3               zpspace         = 26
000000r 3               
000000r 3               ; The amount of space that needs to be saved by an interrupt handler that
000000r 3               ; calls C code (does not include the register bank, which is saved by the
000000r 3               ; generated C code if required).
000000r 3               zpsavespace     = zpspace - regbanksize
000000r 3               
000000r 3               
000000r 2               .include "atari2600.inc"
000000r 3               ; Atari 2600 TIA & RIOT read / write registers
000000r 3               ;
000000r 3               ; Florent Flament (contact@florentflament.com), 2017
000000r 3               
000000r 3               ; TIA & RIOT registers mapping
000000r 3               .include "atari2600_tia.inc"
000000r 4               ; Atari 2600 TIA read / write registers
000000r 4               ;
000000r 4               ; Source: DASM - vcs.h
000000r 4               ; Details available in: Stella Programmer's Guide by Steve Wright
000000r 4               ;
000000r 4               ; Florent Flament (contact@florentflament.com), 2017
000000r 4               
000000r 4               ; Read registers
000000r 4               VSYNC  := $00
000000r 4               VBLANK := $01
000000r 4               WSYNC  := $02
000000r 4               RSYNC  := $03
000000r 4               NUSIZ0 := $04
000000r 4               NUSIZ1 := $05
000000r 4               COLUP0 := $06
000000r 4               COLUP1 := $07
000000r 4               COLUPF := $08
000000r 4               COLUBK := $09
000000r 4               CTRLPF := $0A
000000r 4               REFP0  := $0B
000000r 4               REFP1  := $0C
000000r 4               PF0    := $0D
000000r 4               PF1    := $0E
000000r 4               PF2    := $0F
000000r 4               RESP0  := $10
000000r 4               RESP1  := $11
000000r 4               RESM0  := $12
000000r 4               RESM1  := $13
000000r 4               RESBL  := $14
000000r 4               AUDC0  := $15
000000r 4               AUDC1  := $16
000000r 4               AUDF0  := $17
000000r 4               AUDF1  := $18
000000r 4               AUDV0  := $19
000000r 4               AUDV1  := $1A
000000r 4               GRP0   := $1B
000000r 4               GRP1   := $1C
000000r 4               ENAM0  := $1D
000000r 4               ENAM1  := $1E
000000r 4               ENABL  := $1F
000000r 4               HMP0   := $20
000000r 4               HMP1   := $21
000000r 4               HMM0   := $22
000000r 4               HMM1   := $23
000000r 4               HMBL   := $24
000000r 4               VDELP0 := $25
000000r 4               VDELP1 := $26
000000r 4               VDELBL := $27
000000r 4               RESMP0 := $28
000000r 4               RESMP1 := $29
000000r 4               HMOVE  := $2A
000000r 4               HMCLR  := $2B
000000r 4               CXCLR  := $2C
000000r 4               
000000r 4               ; Write registers
000000r 4               CXM0P  := $00
000000r 4               CXM1P  := $01
000000r 4               CXP0FB := $02
000000r 4               CXP1FB := $03
000000r 4               CXM0FB := $04
000000r 4               CXM1FB := $05
000000r 4               CXBLPF := $06
000000r 4               CXPPMM := $07
000000r 4               INPT0  := $08
000000r 4               INPT1  := $09
000000r 4               INPT2  := $0A
000000r 4               INPT3  := $0B
000000r 4               INPT4  := $0C
000000r 4               INPT5  := $0D
000000r 4               
000000r 3               .include "atari2600_riot.inc"
000000r 4               ; Atari 2600 RIOT read / write registers
000000r 4               ;
000000r 4               ; Source: DASM - vcs.h
000000r 4               ; Details available in: Stella Programmer's Guide by Steve Wright
000000r 4               ;
000000r 4               ; Florent Flament (contact@florentflament.com), 2017
000000r 4               
000000r 4               ; Read registers
000000r 4               SWCHA  := $0280
000000r 4               SWACNT := $0281
000000r 4               SWCHB  := $0282
000000r 4               SWBCNT := $0283
000000r 4               INTIM  := $0284
000000r 4               TIMINT := $0285
000000r 4               
000000r 4               ; Write registers
000000r 4               TIM1T  := $0294
000000r 4               TIM8T  := $0295
000000r 4               TIM64T := $0296
000000r 4               T1024T := $0297
000000r 4               
000000r 3               
000000r 2               .include "popax.inc"
000000r 3               .macro popax
000000r 3                       ldy     #1
000000r 3                       lda     (sp),y          ; get hi byte
000000r 3                       tax                     ; into x
000000r 3                       dey
000000r 3                       lda     (sp),y          ; get lo byte
000000r 3                       inc     sp              ; 5
000000r 3                       inc     sp              ; 5
000000r 3               .endmacro
000000r 3               
000000r 2               .include "mBankCall.inc"
000000r 3               .macro mBankCall fn
000000r 3               	ldy 	#0
000000r 3               	lda 	#>fn
000000r 3               	dec 	sp
000000r 3               	sta 	(sp),Y
000000r 3               	lda 	#<fn
000000r 3               	dec 	sp
000000r 3               	sta 	(sp),Y
000000r 3               	jsr 	_bankCall
000000r 3               .endmacro
000000r 3               
000000r 2               
000000r 2               .import _bankCall   ; call some code in another bank (jsr _bankCall)
000000r 2               .import _bankReturn ; return to calling code in another bank (jmp _bankReturn)
000000r 2               
000000r 2               .import _wait_vblank
000000r 2               .import _wait_overscan
000000r 2               
000000r 1               .include "banksetup.inc"
000000r 2               .define CODE_SEGMENT   "CODE6"
000000r 2               .define RODATA_SEGMENT "RODATA6"
000000r 2               
000000r 1               
000000r 1               .export _palette_kernal
000000r 1               
000000r 1               .segment CODE_SEGMENT
000000r 1               
000000r 1               _palette_kernal:
000000r 1  20 rr rr     	jsr _wait_vblank
000003r 1               
000003r 1               	;; Skip first 6 lines
000003r 1  A2 06        	ldx #6
000005r 1               skip_header:
000005r 1  85 02        	sta WSYNC
000007r 1  CA           	dex
000008r 1  D0 FB        	bne skip_header
00000Ar 1               
00000Ar 1  18           	clc
00000Br 1  A2 00        	ldx #0
00000Dr 1               next_line:
00000Dr 1  85 02 8A 85  	.repeat 14
000011r 1  09 EA EA EA  
000015r 1  EA EA EA EA  
0002BBr 1               	sta WSYNC
0002BBr 1               	txa
0002BBr 1               	sta COLUBK
0002BBr 1               	.repeat 9
0002BBr 1               	nop
0002BBr 1               	.endrepeat
0002BBr 1               	.repeat 7
0002BBr 1               	adc #$02
0002BBr 1               	sta COLUBK
0002BBr 1               	nop
0002BBr 1               	.endrepeat
0002BBr 1               	.endrepeat
0002BBr 1               
0002BBr 1  85 02        	sta WSYNC
0002BDr 1  A9 00        	lda #$0
0002BFr 1  85 09        	sta COLUBK
0002C1r 1  8A           	txa
0002C2r 1  69 10        	adc #$10
0002C4r 1  AA           	tax
0002C5r 1  B0 03        	bcs end
0002C7r 1  4C rr rr     	jmp next_line
0002CAr 1               end:
0002CAr 1               	;; jmp _bankReturn
0002CAr 1               	;; This kernal must now be called with cBankCall
0002CAr 1  60           	rts
0002CAr 1               
