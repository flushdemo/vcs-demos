ca65 V2.15
Main file   : bank0/c/eyes_fx.s
Current file: bank0/c/eyes_fx.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.15
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.15"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.import		_bankCall
000000r 1               	.import		_wait_overscan
000000r 1               	.import		_eyes_kernal
000000r 1               	.export		_eyes_fx
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               .segment	"RODATA0"
000000r 1               _eyescos:
000000r 1  98           	.byte	$98
000001r 1  97           	.byte	$97
000002r 1  97           	.byte	$97
000003r 1  97           	.byte	$97
000004r 1  97           	.byte	$97
000005r 1  96           	.byte	$96
000006r 1  96           	.byte	$96
000007r 1  95           	.byte	$95
000008r 1  95           	.byte	$95
000009r 1  94           	.byte	$94
00000Ar 1  93           	.byte	$93
00000Br 1  92           	.byte	$92
00000Cr 1  91           	.byte	$91
00000Dr 1  90           	.byte	$90
00000Er 1  8F           	.byte	$8F
00000Fr 1  8D           	.byte	$8D
000010r 1  8C           	.byte	$8C
000011r 1  8B           	.byte	$8B
000012r 1  89           	.byte	$89
000013r 1  88           	.byte	$88
000014r 1  86           	.byte	$86
000015r 1  84           	.byte	$84
000016r 1  82           	.byte	$82
000017r 1  81           	.byte	$81
000018r 1  7F           	.byte	$7F
000019r 1  7D           	.byte	$7D
00001Ar 1  7B           	.byte	$7B
00001Br 1  78           	.byte	$78
00001Cr 1  76           	.byte	$76
00001Dr 1  74           	.byte	$74
00001Er 1  72           	.byte	$72
00001Fr 1  70           	.byte	$70
000020r 1  6D           	.byte	$6D
000021r 1  6B           	.byte	$6B
000022r 1  68           	.byte	$68
000023r 1  66           	.byte	$66
000024r 1  63           	.byte	$63
000025r 1  61           	.byte	$61
000026r 1  5E           	.byte	$5E
000027r 1  5C           	.byte	$5C
000028r 1  59           	.byte	$59
000029r 1  57           	.byte	$57
00002Ar 1  54           	.byte	$54
00002Br 1  51           	.byte	$51
00002Cr 1  4F           	.byte	$4F
00002Dr 1  4C           	.byte	$4C
00002Er 1  4A           	.byte	$4A
00002Fr 1  47           	.byte	$47
000030r 1  44           	.byte	$44
000031r 1  42           	.byte	$42
000032r 1  3F           	.byte	$3F
000033r 1  3C           	.byte	$3C
000034r 1  3A           	.byte	$3A
000035r 1  37           	.byte	$37
000036r 1  35           	.byte	$35
000037r 1  32           	.byte	$32
000038r 1  30           	.byte	$30
000039r 1  2D           	.byte	$2D
00003Ar 1  2B           	.byte	$2B
00003Br 1  29           	.byte	$29
00003Cr 1  26           	.byte	$26
00003Dr 1  24           	.byte	$24
00003Er 1  22           	.byte	$22
00003Fr 1  20           	.byte	$20
000040r 1  1D           	.byte	$1D
000041r 1  1B           	.byte	$1B
000042r 1  19           	.byte	$19
000043r 1  17           	.byte	$17
000044r 1  16           	.byte	$16
000045r 1  14           	.byte	$14
000046r 1  12           	.byte	$12
000047r 1  10           	.byte	$10
000048r 1  0F           	.byte	$0F
000049r 1  0D           	.byte	$0D
00004Ar 1  0C           	.byte	$0C
00004Br 1  0A           	.byte	$0A
00004Cr 1  09           	.byte	$09
00004Dr 1  08           	.byte	$08
00004Er 1  07           	.byte	$07
00004Fr 1  05           	.byte	$05
000050r 1  04           	.byte	$04
000051r 1  04           	.byte	$04
000052r 1  03           	.byte	$03
000053r 1  02           	.byte	$02
000054r 1  01           	.byte	$01
000055r 1  01           	.byte	$01
000056r 1  00           	.byte	$00
000057r 1  00           	.byte	$00
000058r 1  00           	.byte	$00
000059r 1  00           	.byte	$00
00005Ar 1  00           	.byte	$00
00005Br 1  00           	.byte	$00
00005Cr 1  00           	.byte	$00
00005Dr 1  00           	.byte	$00
00005Er 1  00           	.byte	$00
00005Fr 1  00           	.byte	$00
000060r 1  01           	.byte	$01
000061r 1  01           	.byte	$01
000062r 1  02           	.byte	$02
000063r 1  03           	.byte	$03
000064r 1  04           	.byte	$04
000065r 1  04           	.byte	$04
000066r 1  05           	.byte	$05
000067r 1  07           	.byte	$07
000068r 1  08           	.byte	$08
000069r 1  09           	.byte	$09
00006Ar 1  0A           	.byte	$0A
00006Br 1  0C           	.byte	$0C
00006Cr 1  0D           	.byte	$0D
00006Dr 1  0F           	.byte	$0F
00006Er 1  10           	.byte	$10
00006Fr 1  12           	.byte	$12
000070r 1  14           	.byte	$14
000071r 1  16           	.byte	$16
000072r 1  17           	.byte	$17
000073r 1  19           	.byte	$19
000074r 1  1B           	.byte	$1B
000075r 1  1D           	.byte	$1D
000076r 1  20           	.byte	$20
000077r 1  22           	.byte	$22
000078r 1  24           	.byte	$24
000079r 1  26           	.byte	$26
00007Ar 1  29           	.byte	$29
00007Br 1  2B           	.byte	$2B
00007Cr 1  2D           	.byte	$2D
00007Dr 1  30           	.byte	$30
00007Er 1  32           	.byte	$32
00007Fr 1  35           	.byte	$35
000080r 1  37           	.byte	$37
000081r 1  3A           	.byte	$3A
000082r 1  3C           	.byte	$3C
000083r 1  3F           	.byte	$3F
000084r 1  42           	.byte	$42
000085r 1  44           	.byte	$44
000086r 1  47           	.byte	$47
000087r 1  4A           	.byte	$4A
000088r 1  4C           	.byte	$4C
000089r 1  4F           	.byte	$4F
00008Ar 1  51           	.byte	$51
00008Br 1  54           	.byte	$54
00008Cr 1  57           	.byte	$57
00008Dr 1  59           	.byte	$59
00008Er 1  5C           	.byte	$5C
00008Fr 1  5E           	.byte	$5E
000090r 1  61           	.byte	$61
000091r 1  63           	.byte	$63
000092r 1  66           	.byte	$66
000093r 1  68           	.byte	$68
000094r 1  6B           	.byte	$6B
000095r 1  6D           	.byte	$6D
000096r 1  70           	.byte	$70
000097r 1  72           	.byte	$72
000098r 1  74           	.byte	$74
000099r 1  76           	.byte	$76
00009Ar 1  78           	.byte	$78
00009Br 1  7B           	.byte	$7B
00009Cr 1  7D           	.byte	$7D
00009Dr 1  7F           	.byte	$7F
00009Er 1  81           	.byte	$81
00009Fr 1  82           	.byte	$82
0000A0r 1  84           	.byte	$84
0000A1r 1  86           	.byte	$86
0000A2r 1  88           	.byte	$88
0000A3r 1  89           	.byte	$89
0000A4r 1  8B           	.byte	$8B
0000A5r 1  8C           	.byte	$8C
0000A6r 1  8D           	.byte	$8D
0000A7r 1  8F           	.byte	$8F
0000A8r 1  90           	.byte	$90
0000A9r 1  91           	.byte	$91
0000AAr 1  92           	.byte	$92
0000ABr 1  93           	.byte	$93
0000ACr 1  94           	.byte	$94
0000ADr 1  95           	.byte	$95
0000AEr 1  95           	.byte	$95
0000AFr 1  96           	.byte	$96
0000B0r 1  96           	.byte	$96
0000B1r 1  97           	.byte	$97
0000B2r 1  97           	.byte	$97
0000B3r 1  97           	.byte	$97
0000B4r 1  97           	.byte	$97
0000B5r 1               _eyessin:
0000B5r 1  78           	.byte	$78
0000B6r 1  7B           	.byte	$7B
0000B7r 1  7E           	.byte	$7E
0000B8r 1  82           	.byte	$82
0000B9r 1  85           	.byte	$85
0000BAr 1  89           	.byte	$89
0000BBr 1  8C           	.byte	$8C
0000BCr 1  8F           	.byte	$8F
0000BDr 1  93           	.byte	$93
0000BEr 1  96           	.byte	$96
0000BFr 1  99           	.byte	$99
0000C0r 1  9D           	.byte	$9D
0000C1r 1  A0           	.byte	$A0
0000C2r 1  A3           	.byte	$A3
0000C3r 1  A6           	.byte	$A6
0000C4r 1  A9           	.byte	$A9
0000C5r 1  AC           	.byte	$AC
0000C6r 1  B0           	.byte	$B0
0000C7r 1  B3           	.byte	$B3
0000C8r 1  B5           	.byte	$B5
0000C9r 1  B8           	.byte	$B8
0000CAr 1  BB           	.byte	$BB
0000CBr 1  BE           	.byte	$BE
0000CCr 1  C1           	.byte	$C1
0000CDr 1  C3           	.byte	$C3
0000CEr 1  C6           	.byte	$C6
0000CFr 1  C9           	.byte	$C9
0000D0r 1  CB           	.byte	$CB
0000D1r 1  CE           	.byte	$CE
0000D2r 1  D0           	.byte	$D0
0000D3r 1  D2           	.byte	$D2
0000D4r 1  D4           	.byte	$D4
0000D5r 1  D7           	.byte	$D7
0000D6r 1  D9           	.byte	$D9
0000D7r 1  DB           	.byte	$DB
0000D8r 1  DC           	.byte	$DC
0000D9r 1  DE           	.byte	$DE
0000DAr 1  E0           	.byte	$E0
0000DBr 1  E2           	.byte	$E2
0000DCr 1  E3           	.byte	$E3
0000DDr 1  E5           	.byte	$E5
0000DEr 1  E6           	.byte	$E6
0000DFr 1  E7           	.byte	$E7
0000E0r 1  E9           	.byte	$E9
0000E1r 1  EA           	.byte	$EA
0000E2r 1  EB           	.byte	$EB
0000E3r 1  EC           	.byte	$EC
0000E4r 1  EC           	.byte	$EC
0000E5r 1  ED           	.byte	$ED
0000E6r 1  EE           	.byte	$EE
0000E7r 1  EE           	.byte	$EE
0000E8r 1  EF           	.byte	$EF
0000E9r 1  EF           	.byte	$EF
0000EAr 1  EF           	.byte	$EF
0000EBr 1  EF           	.byte	$EF
0000ECr 1  EF           	.byte	$EF
0000EDr 1  EF           	.byte	$EF
0000EEr 1  EF           	.byte	$EF
0000EFr 1  EF           	.byte	$EF
0000F0r 1  EF           	.byte	$EF
0000F1r 1  EE           	.byte	$EE
0000F2r 1  EE           	.byte	$EE
0000F3r 1  ED           	.byte	$ED
0000F4r 1  EC           	.byte	$EC
0000F5r 1  EC           	.byte	$EC
0000F6r 1  EB           	.byte	$EB
0000F7r 1  EA           	.byte	$EA
0000F8r 1  E9           	.byte	$E9
0000F9r 1  E7           	.byte	$E7
0000FAr 1  E6           	.byte	$E6
0000FBr 1  E5           	.byte	$E5
0000FCr 1  E3           	.byte	$E3
0000FDr 1  E2           	.byte	$E2
0000FEr 1  E0           	.byte	$E0
0000FFr 1  DE           	.byte	$DE
000100r 1  DC           	.byte	$DC
000101r 1  DB           	.byte	$DB
000102r 1  D9           	.byte	$D9
000103r 1  D7           	.byte	$D7
000104r 1  D4           	.byte	$D4
000105r 1  D2           	.byte	$D2
000106r 1  D0           	.byte	$D0
000107r 1  CE           	.byte	$CE
000108r 1  CB           	.byte	$CB
000109r 1  C9           	.byte	$C9
00010Ar 1  C6           	.byte	$C6
00010Br 1  C3           	.byte	$C3
00010Cr 1  C1           	.byte	$C1
00010Dr 1  BE           	.byte	$BE
00010Er 1  BB           	.byte	$BB
00010Fr 1  B8           	.byte	$B8
000110r 1  B5           	.byte	$B5
000111r 1  B3           	.byte	$B3
000112r 1  B0           	.byte	$B0
000113r 1  AC           	.byte	$AC
000114r 1  A9           	.byte	$A9
000115r 1  A6           	.byte	$A6
000116r 1  A3           	.byte	$A3
000117r 1  A0           	.byte	$A0
000118r 1  9D           	.byte	$9D
000119r 1  99           	.byte	$99
00011Ar 1  96           	.byte	$96
00011Br 1  93           	.byte	$93
00011Cr 1  8F           	.byte	$8F
00011Dr 1  8C           	.byte	$8C
00011Er 1  89           	.byte	$89
00011Fr 1  85           	.byte	$85
000120r 1  82           	.byte	$82
000121r 1  7E           	.byte	$7E
000122r 1  7B           	.byte	$7B
000123r 1  78           	.byte	$78
000124r 1  74           	.byte	$74
000125r 1  71           	.byte	$71
000126r 1  6D           	.byte	$6D
000127r 1  6A           	.byte	$6A
000128r 1  66           	.byte	$66
000129r 1  63           	.byte	$63
00012Ar 1  60           	.byte	$60
00012Br 1  5C           	.byte	$5C
00012Cr 1  59           	.byte	$59
00012Dr 1  56           	.byte	$56
00012Er 1  52           	.byte	$52
00012Fr 1  4F           	.byte	$4F
000130r 1  4C           	.byte	$4C
000131r 1  49           	.byte	$49
000132r 1  46           	.byte	$46
000133r 1  43           	.byte	$43
000134r 1  3F           	.byte	$3F
000135r 1  3C           	.byte	$3C
000136r 1  3A           	.byte	$3A
000137r 1  37           	.byte	$37
000138r 1  34           	.byte	$34
000139r 1  31           	.byte	$31
00013Ar 1  2E           	.byte	$2E
00013Br 1  2C           	.byte	$2C
00013Cr 1  29           	.byte	$29
00013Dr 1  26           	.byte	$26
00013Er 1  24           	.byte	$24
00013Fr 1  21           	.byte	$21
000140r 1  1F           	.byte	$1F
000141r 1  1D           	.byte	$1D
000142r 1  1B           	.byte	$1B
000143r 1  18           	.byte	$18
000144r 1  16           	.byte	$16
000145r 1  14           	.byte	$14
000146r 1  13           	.byte	$13
000147r 1  11           	.byte	$11
000148r 1  0F           	.byte	$0F
000149r 1  0D           	.byte	$0D
00014Ar 1  0C           	.byte	$0C
00014Br 1  0A           	.byte	$0A
00014Cr 1  09           	.byte	$09
00014Dr 1  08           	.byte	$08
00014Er 1  06           	.byte	$06
00014Fr 1  05           	.byte	$05
000150r 1  04           	.byte	$04
000151r 1  03           	.byte	$03
000152r 1  03           	.byte	$03
000153r 1  02           	.byte	$02
000154r 1  01           	.byte	$01
000155r 1  01           	.byte	$01
000156r 1  00           	.byte	$00
000157r 1  00           	.byte	$00
000158r 1  00           	.byte	$00
000159r 1  00           	.byte	$00
00015Ar 1  00           	.byte	$00
00015Br 1  00           	.byte	$00
00015Cr 1  00           	.byte	$00
00015Dr 1  00           	.byte	$00
00015Er 1  00           	.byte	$00
00015Fr 1  01           	.byte	$01
000160r 1  01           	.byte	$01
000161r 1  02           	.byte	$02
000162r 1  03           	.byte	$03
000163r 1  03           	.byte	$03
000164r 1  04           	.byte	$04
000165r 1  05           	.byte	$05
000166r 1  06           	.byte	$06
000167r 1  08           	.byte	$08
000168r 1  09           	.byte	$09
000169r 1  0A           	.byte	$0A
00016Ar 1  0C           	.byte	$0C
00016Br 1  0D           	.byte	$0D
00016Cr 1  0F           	.byte	$0F
00016Dr 1  11           	.byte	$11
00016Er 1  13           	.byte	$13
00016Fr 1  14           	.byte	$14
000170r 1  16           	.byte	$16
000171r 1  18           	.byte	$18
000172r 1  1B           	.byte	$1B
000173r 1  1D           	.byte	$1D
000174r 1  1F           	.byte	$1F
000175r 1  21           	.byte	$21
000176r 1  24           	.byte	$24
000177r 1  26           	.byte	$26
000178r 1  29           	.byte	$29
000179r 1  2C           	.byte	$2C
00017Ar 1  2E           	.byte	$2E
00017Br 1  31           	.byte	$31
00017Cr 1  34           	.byte	$34
00017Dr 1  37           	.byte	$37
00017Er 1  3A           	.byte	$3A
00017Fr 1  3C           	.byte	$3C
000180r 1  3F           	.byte	$3F
000181r 1  43           	.byte	$43
000182r 1  46           	.byte	$46
000183r 1  49           	.byte	$49
000184r 1  4C           	.byte	$4C
000185r 1  4F           	.byte	$4F
000186r 1  52           	.byte	$52
000187r 1  56           	.byte	$56
000188r 1  59           	.byte	$59
000189r 1  5C           	.byte	$5C
00018Ar 1  60           	.byte	$60
00018Br 1  63           	.byte	$63
00018Cr 1  66           	.byte	$66
00018Dr 1  6A           	.byte	$6A
00018Er 1  6D           	.byte	$6D
00018Fr 1  71           	.byte	$71
000190r 1  74           	.byte	$74
000191r 1               _eyescol:
000191r 1  60           	.byte	$60
000192r 1  62           	.byte	$62
000193r 1  64           	.byte	$64
000194r 1  66           	.byte	$66
000195r 1  68           	.byte	$68
000196r 1  6A           	.byte	$6A
000197r 1  6C           	.byte	$6C
000198r 1  6E           	.byte	$6E
000199r 1  6E           	.byte	$6E
00019Ar 1  6C           	.byte	$6C
00019Br 1  6A           	.byte	$6A
00019Cr 1  68           	.byte	$68
00019Dr 1  66           	.byte	$66
00019Er 1  64           	.byte	$64
00019Fr 1  62           	.byte	$62
0001A0r 1  60           	.byte	$60
0001A1r 1  20           	.byte	$20
0001A2r 1  22           	.byte	$22
0001A3r 1  24           	.byte	$24
0001A4r 1  26           	.byte	$26
0001A5r 1  28           	.byte	$28
0001A6r 1  2A           	.byte	$2A
0001A7r 1  2C           	.byte	$2C
0001A8r 1  2E           	.byte	$2E
0001A9r 1  2E           	.byte	$2E
0001AAr 1  2C           	.byte	$2C
0001ABr 1  2A           	.byte	$2A
0001ACr 1  28           	.byte	$28
0001ADr 1  26           	.byte	$26
0001AEr 1  24           	.byte	$24
0001AFr 1  22           	.byte	$22
0001B0r 1  20           	.byte	$20
0001B1r 1               
0001B1r 1               ; ---------------------------------------------------------------
0001B1r 1               ; void __near__ eyes_fx (void)
0001B1r 1               ; ---------------------------------------------------------------
0001B1r 1               
0001B1r 1               .segment	"CODE0"
000000r 1               
000000r 1               .proc	_eyes_fx: near
000000r 1               
000000r 1               .segment	"CODE0"
000000r 1               
000000r 1               ;
000000r 1               ; TIA.colup0 = TIA.colup1 = 0x66;
000000r 1               ;
000000r 1  20 rr rr     	jsr     decsp8
000003r 1  A2 00        	ldx     #$00
000005r 1  A9 66        	lda     #$66
000007r 1  85 07        	sta     $0007
000009r 1  85 06        	sta     $0006
00000Br 1               ;
00000Br 1               ; i = 53;
00000Br 1               ;
00000Br 1  A2 00        	ldx     #$00
00000Dr 1  A9 35        	lda     #$35
00000Fr 1  A0 07        	ldy     #$07
000011r 1  91 rr        	sta     (sp),y
000013r 1               ;
000013r 1               ; i2 = 37;
000013r 1               ;
000013r 1  A2 00        	ldx     #$00
000015r 1  A9 25        	lda     #$25
000017r 1  A0 06        	ldy     #$06
000019r 1  91 rr        	sta     (sp),y
00001Br 1               ;
00001Br 1               ; j = 115;
00001Br 1               ;
00001Br 1  A2 00        	ldx     #$00
00001Dr 1  A9 73        	lda     #$73
00001Fr 1  A0 05        	ldy     #$05
000021r 1  91 rr        	sta     (sp),y
000023r 1               ;
000023r 1               ; j2 = 115; // eyessin[115] = 102
000023r 1               ;
000023r 1  A2 00        	ldx     #$00
000025r 1  A9 73        	lda     #$73
000027r 1  A0 04        	ldy     #$04
000029r 1  91 rr        	sta     (sp),y
00002Br 1               ;
00002Br 1               ; prevx = eyescos[i];
00002Br 1               ;
00002Br 1  A9 rr        	lda     #<(_eyescos)
00002Dr 1  A2 rr        	ldx     #>(_eyescos)
00002Fr 1  A0 07        	ldy     #$07
000031r 1  18           	clc
000032r 1  71 rr        	adc     (sp),y
000034r 1  90 01        	bcc     L01C6
000036r 1  E8           	inx
000037r 1  A0 00        L01C6:	ldy     #$00
000039r 1  20 rr rr     	jsr     ldauidx
00003Cr 1  A0 03        	ldy     #$03
00003Er 1  91 rr        	sta     (sp),y
000040r 1               ;
000040r 1               ; prevx2 = eyescos[i2];
000040r 1               ;
000040r 1  A9 rr        	lda     #<(_eyescos)
000042r 1  A2 rr        	ldx     #>(_eyescos)
000044r 1  A0 06        	ldy     #$06
000046r 1  18           	clc
000047r 1  71 rr        	adc     (sp),y
000049r 1  90 01        	bcc     L01CA
00004Br 1  E8           	inx
00004Cr 1  A0 00        L01CA:	ldy     #$00
00004Er 1  20 rr rr     	jsr     ldauidx
000051r 1  A0 02        	ldy     #$02
000053r 1  91 rr        	sta     (sp),y
000055r 1               ;
000055r 1               ; TIA.hmp1 = 0;
000055r 1               ;
000055r 1  A2 00        	ldx     #$00
000057r 1  A9 00        	lda     #$00
000059r 1  85 21        	sta     $0021
00005Br 1               ;
00005Br 1               ; for(k=0; k<25; k++) {
00005Br 1               ;
00005Br 1  A2 00        	ldx     #$00
00005Dr 1  A9 00        	lda     #$00
00005Fr 1  A0 00        	ldy     #$00
000061r 1  20 rr rr     	jsr     staxysp
000064r 1  A0 01        L01CE:	ldy     #$01
000066r 1  20 rr rr     	jsr     ldaxysp
000069r 1  E0 00        	cpx     #$00
00006Br 1  D0 02        	bne     L01D5
00006Dr 1  C9 19        	cmp     #$19
00006Fr 1  20 rr rr     L01D5:	jsr     boolult
000072r 1  F0 03 4C rr  	jne     L01D1
000076r 1  rr           
000077r 1  4C rr rr     	jmp     L01CF
00007Ar 1               ;
00007Ar 1               ; TIA.hmp0 = (prevx - eyescos[i]) << 4;
00007Ar 1               ;
00007Ar 1  A0 03        L01D1:	ldy     #$03
00007Cr 1  A2 00        	ldx     #$00
00007Er 1  B1 rr        	lda     (sp),y
000080r 1  20 rr rr     	jsr     pushax
000083r 1  A9 rr        	lda     #<(_eyescos)
000085r 1  A2 rr        	ldx     #>(_eyescos)
000087r 1  A0 09        	ldy     #$09
000089r 1  18           	clc
00008Ar 1  71 rr        	adc     (sp),y
00008Cr 1  90 01        	bcc     L01DC
00008Er 1  E8           	inx
00008Fr 1  A0 00        L01DC:	ldy     #$00
000091r 1  20 rr rr     	jsr     ldauidx
000094r 1  20 rr rr     	jsr     tossubax
000097r 1  20 rr rr     	jsr     shlax4
00009Ar 1  A2 00        	ldx     #$00
00009Cr 1  85 20        	sta     $0020
00009Er 1               ;
00009Er 1               ; TIA.wsync = 0;
00009Er 1               ;
00009Er 1  A2 00        	ldx     #$00
0000A0r 1  A9 00        	lda     #$00
0000A2r 1  85 02        	sta     $0002
0000A4r 1               ;
0000A4r 1               ; TIA.hmove = 0;
0000A4r 1               ;
0000A4r 1  A2 00        	ldx     #$00
0000A6r 1  A9 00        	lda     #$00
0000A8r 1  85 2A        	sta     $002A
0000AAr 1               ;
0000AAr 1               ; wait_overscan();
0000AAr 1               ;
0000AAr 1  20 rr rr     	jsr     _wait_overscan
0000ADr 1               ;
0000ADr 1               ; bankCall(eyessin[j], eyessin[j2], eyes_kernal);
0000ADr 1               ;
0000ADr 1  A9 rr        	lda     #<(_eyessin)
0000AFr 1  A2 rr        	ldx     #>(_eyessin)
0000B1r 1  A0 05        	ldy     #$05
0000B3r 1  18           	clc
0000B4r 1  71 rr        	adc     (sp),y
0000B6r 1  90 01        	bcc     L01E7
0000B8r 1  E8           	inx
0000B9r 1  A0 00        L01E7:	ldy     #$00
0000BBr 1  20 rr rr     	jsr     ldauidx
0000BEr 1  20 rr rr     	jsr     pushax
0000C1r 1  A9 rr        	lda     #<(_eyessin)
0000C3r 1  A2 rr        	ldx     #>(_eyessin)
0000C5r 1  A0 06        	ldy     #$06
0000C7r 1  18           	clc
0000C8r 1  71 rr        	adc     (sp),y
0000CAr 1  90 01        	bcc     L01EA
0000CCr 1  E8           	inx
0000CDr 1  A0 00        L01EA:	ldy     #$00
0000CFr 1  20 rr rr     	jsr     ldauidx
0000D2r 1  20 rr rr     	jsr     pushax
0000D5r 1  A9 rr        	lda     #<(_eyes_kernal)
0000D7r 1  A2 rr        	ldx     #>(_eyes_kernal)
0000D9r 1  20 rr rr     	jsr     pushax
0000DCr 1  A0 06        	ldy     #$06
0000DEr 1  20 rr rr     	jsr     _bankCall
0000E1r 1               ;
0000E1r 1               ; prevx = eyescos[i];
0000E1r 1               ;
0000E1r 1  A9 rr        	lda     #<(_eyescos)
0000E3r 1  A2 rr        	ldx     #>(_eyescos)
0000E5r 1  A0 07        	ldy     #$07
0000E7r 1  18           	clc
0000E8r 1  71 rr        	adc     (sp),y
0000EAr 1  90 01        	bcc     L01EF
0000ECr 1  E8           	inx
0000EDr 1  A0 00        L01EF:	ldy     #$00
0000EFr 1  20 rr rr     	jsr     ldauidx
0000F2r 1  A0 03        	ldy     #$03
0000F4r 1  91 rr        	sta     (sp),y
0000F6r 1               ;
0000F6r 1               ; i = i+1 >= sizeof(eyescos) ? 0 : i+1;
0000F6r 1               ;
0000F6r 1  A0 07        	ldy     #$07
0000F8r 1  A2 00        	ldx     #$00
0000FAr 1  B1 rr        	lda     (sp),y
0000FCr 1  20 rr rr     	jsr     incax1
0000FFr 1  C9 B5        	cmp     #$B5
000101r 1  8A           	txa
000102r 1  E9 00        	sbc     #$00
000104r 1  A9 00        	lda     #$00
000106r 1  A2 00        	ldx     #$00
000108r 1  2A           	rol     a
000109r 1  D0 03 4C rr  	jeq     L01F3
00010Dr 1  rr           
00010Er 1  A2 00        	ldx     #$00
000110r 1  A9 00        	lda     #$00
000112r 1  4C rr rr     	jmp     L01F5
000115r 1  A0 07        L01F3:	ldy     #$07
000117r 1  A2 00        	ldx     #$00
000119r 1  B1 rr        	lda     (sp),y
00011Br 1  20 rr rr     	jsr     incax1
00011Er 1  A2 00        L01F5:	ldx     #$00
000120r 1  A0 07        	ldy     #$07
000122r 1  91 rr        	sta     (sp),y
000124r 1               ;
000124r 1               ; j = j+1 >= sizeof(eyessin) ? 0 : j+1;
000124r 1               ;
000124r 1  A0 05        	ldy     #$05
000126r 1  A2 00        	ldx     #$00
000128r 1  B1 rr        	lda     (sp),y
00012Ar 1  20 rr rr     	jsr     incax1
00012Dr 1  C9 DC        	cmp     #$DC
00012Fr 1  8A           	txa
000130r 1  E9 00        	sbc     #$00
000132r 1  A9 00        	lda     #$00
000134r 1  A2 00        	ldx     #$00
000136r 1  2A           	rol     a
000137r 1  D0 03 4C rr  	jeq     L01FA
00013Br 1  rr           
00013Cr 1  A2 00        	ldx     #$00
00013Er 1  A9 00        	lda     #$00
000140r 1  4C rr rr     	jmp     L01FC
000143r 1  A0 05        L01FA:	ldy     #$05
000145r 1  A2 00        	ldx     #$00
000147r 1  B1 rr        	lda     (sp),y
000149r 1  20 rr rr     	jsr     incax1
00014Cr 1  A2 00        L01FC:	ldx     #$00
00014Er 1  A0 05        	ldy     #$05
000150r 1  91 rr        	sta     (sp),y
000152r 1               ;
000152r 1               ; for(k=0; k<25; k++) {
000152r 1               ;
000152r 1  A0 01        	ldy     #$01
000154r 1  20 rr rr     	jsr     ldaxysp
000157r 1  85 rr        	sta     regsave
000159r 1  86 rr        	stx     regsave+1
00015Br 1  20 rr rr     	jsr     incax1
00015Er 1  A0 00        	ldy     #$00
000160r 1  20 rr rr     	jsr     staxysp
000163r 1  A5 rr        	lda     regsave
000165r 1  A6 rr        	ldx     regsave+1
000167r 1  4C rr rr     	jmp     L01CE
00016Ar 1               ;
00016Ar 1               ; for(k=0; k<DURATION; k++) {
00016Ar 1               ;
00016Ar 1  A2 00        L01CF:	ldx     #$00
00016Cr 1  A9 00        	lda     #$00
00016Er 1  A0 00        	ldy     #$00
000170r 1  20 rr rr     	jsr     staxysp
000173r 1  A0 01        L01FE:	ldy     #$01
000175r 1  20 rr rr     	jsr     ldaxysp
000178r 1  E0 02        	cpx     #$02
00017Ar 1  D0 02        	bne     L0205
00017Cr 1  C9 EE        	cmp     #$EE
00017Er 1  20 rr rr     L0205:	jsr     boolult
000181r 1  F0 03 4C rr  	jne     L0201
000185r 1  rr           
000186r 1  4C rr rr     	jmp     L01FF
000189r 1               ;
000189r 1               ; TIA.colup0 = eyescol[(k>>2) & 0x1f];
000189r 1               ;
000189r 1  A0 01        L0201:	ldy     #$01
00018Br 1  20 rr rr     	jsr     ldaxysp
00018Er 1  20 rr rr     	jsr     shrax2
000191r 1  A2 00        	ldx     #$00
000193r 1  29 1F        	and     #$1F
000195r 1  18           	clc
000196r 1  69 rr        	adc     #<(_eyescol)
000198r 1  A8           	tay
000199r 1  8A           	txa
00019Ar 1  69 rr        	adc     #>(_eyescol)
00019Cr 1  AA           	tax
00019Dr 1  98           	tya
00019Er 1  A0 00        	ldy     #$00
0001A0r 1  20 rr rr     	jsr     ldauidx
0001A3r 1  85 06        	sta     $0006
0001A5r 1               ;
0001A5r 1               ; TIA.colup1 = eyescol[((k>>2)+8) & 0x1f];
0001A5r 1               ;
0001A5r 1  A0 01        	ldy     #$01
0001A7r 1  20 rr rr     	jsr     ldaxysp
0001AAr 1  20 rr rr     	jsr     shrax2
0001ADr 1  20 rr rr     	jsr     incax8
0001B0r 1  A2 00        	ldx     #$00
0001B2r 1  29 1F        	and     #$1F
0001B4r 1  18           	clc
0001B5r 1  69 rr        	adc     #<(_eyescol)
0001B7r 1  A8           	tay
0001B8r 1  8A           	txa
0001B9r 1  69 rr        	adc     #>(_eyescol)
0001BBr 1  AA           	tax
0001BCr 1  98           	tya
0001BDr 1  A0 00        	ldy     #$00
0001BFr 1  20 rr rr     	jsr     ldauidx
0001C2r 1  85 07        	sta     $0007
0001C4r 1               ;
0001C4r 1               ; TIA.hmp0 = (prevx - eyescos[i]) << 4;
0001C4r 1               ;
0001C4r 1  A0 03        	ldy     #$03
0001C6r 1  A2 00        	ldx     #$00
0001C8r 1  B1 rr        	lda     (sp),y
0001CAr 1  20 rr rr     	jsr     pushax
0001CDr 1  A9 rr        	lda     #<(_eyescos)
0001CFr 1  A2 rr        	ldx     #>(_eyescos)
0001D1r 1  A0 09        	ldy     #$09
0001D3r 1  18           	clc
0001D4r 1  71 rr        	adc     (sp),y
0001D6r 1  90 01        	bcc     L0217
0001D8r 1  E8           	inx
0001D9r 1  A0 00        L0217:	ldy     #$00
0001DBr 1  20 rr rr     	jsr     ldauidx
0001DEr 1  20 rr rr     	jsr     tossubax
0001E1r 1  20 rr rr     	jsr     shlax4
0001E4r 1  A2 00        	ldx     #$00
0001E6r 1  85 20        	sta     $0020
0001E8r 1               ;
0001E8r 1               ; TIA.hmp1 = (prevx2 - eyescos[i2]) << 4;
0001E8r 1               ;
0001E8r 1  A0 02        	ldy     #$02
0001EAr 1  A2 00        	ldx     #$00
0001ECr 1  B1 rr        	lda     (sp),y
0001EEr 1  20 rr rr     	jsr     pushax
0001F1r 1  A9 rr        	lda     #<(_eyescos)
0001F3r 1  A2 rr        	ldx     #>(_eyescos)
0001F5r 1  A0 08        	ldy     #$08
0001F7r 1  18           	clc
0001F8r 1  71 rr        	adc     (sp),y
0001FAr 1  90 01        	bcc     L021D
0001FCr 1  E8           	inx
0001FDr 1  A0 00        L021D:	ldy     #$00
0001FFr 1  20 rr rr     	jsr     ldauidx
000202r 1  20 rr rr     	jsr     tossubax
000205r 1  20 rr rr     	jsr     shlax4
000208r 1  A2 00        	ldx     #$00
00020Ar 1  85 21        	sta     $0021
00020Cr 1               ;
00020Cr 1               ; TIA.wsync = 0;
00020Cr 1               ;
00020Cr 1  A2 00        	ldx     #$00
00020Er 1  A9 00        	lda     #$00
000210r 1  85 02        	sta     $0002
000212r 1               ;
000212r 1               ; TIA.hmove = 0;
000212r 1               ;
000212r 1  A2 00        	ldx     #$00
000214r 1  A9 00        	lda     #$00
000216r 1  85 2A        	sta     $002A
000218r 1               ;
000218r 1               ; wait_overscan();
000218r 1               ;
000218r 1  20 rr rr     	jsr     _wait_overscan
00021Br 1               ;
00021Br 1               ; bankCall(eyessin[j], eyessin[j2], eyes_kernal);
00021Br 1               ;
00021Br 1  A9 rr        	lda     #<(_eyessin)
00021Dr 1  A2 rr        	ldx     #>(_eyessin)
00021Fr 1  A0 05        	ldy     #$05
000221r 1  18           	clc
000222r 1  71 rr        	adc     (sp),y
000224r 1  90 01        	bcc     L0228
000226r 1  E8           	inx
000227r 1  A0 00        L0228:	ldy     #$00
000229r 1  20 rr rr     	jsr     ldauidx
00022Cr 1  20 rr rr     	jsr     pushax
00022Fr 1  A9 rr        	lda     #<(_eyessin)
000231r 1  A2 rr        	ldx     #>(_eyessin)
000233r 1  A0 06        	ldy     #$06
000235r 1  18           	clc
000236r 1  71 rr        	adc     (sp),y
000238r 1  90 01        	bcc     L022B
00023Ar 1  E8           	inx
00023Br 1  A0 00        L022B:	ldy     #$00
00023Dr 1  20 rr rr     	jsr     ldauidx
000240r 1  20 rr rr     	jsr     pushax
000243r 1  A9 rr        	lda     #<(_eyes_kernal)
000245r 1  A2 rr        	ldx     #>(_eyes_kernal)
000247r 1  20 rr rr     	jsr     pushax
00024Ar 1  A0 06        	ldy     #$06
00024Cr 1  20 rr rr     	jsr     _bankCall
00024Fr 1               ;
00024Fr 1               ; prevx = eyescos[i];
00024Fr 1               ;
00024Fr 1  A9 rr        	lda     #<(_eyescos)
000251r 1  A2 rr        	ldx     #>(_eyescos)
000253r 1  A0 07        	ldy     #$07
000255r 1  18           	clc
000256r 1  71 rr        	adc     (sp),y
000258r 1  90 01        	bcc     L0230
00025Ar 1  E8           	inx
00025Br 1  A0 00        L0230:	ldy     #$00
00025Dr 1  20 rr rr     	jsr     ldauidx
000260r 1  A0 03        	ldy     #$03
000262r 1  91 rr        	sta     (sp),y
000264r 1               ;
000264r 1               ; prevx2 = eyescos[i2];
000264r 1               ;
000264r 1  A9 rr        	lda     #<(_eyescos)
000266r 1  A2 rr        	ldx     #>(_eyescos)
000268r 1  A0 06        	ldy     #$06
00026Ar 1  18           	clc
00026Br 1  71 rr        	adc     (sp),y
00026Dr 1  90 01        	bcc     L0234
00026Fr 1  E8           	inx
000270r 1  A0 00        L0234:	ldy     #$00
000272r 1  20 rr rr     	jsr     ldauidx
000275r 1  A0 02        	ldy     #$02
000277r 1  91 rr        	sta     (sp),y
000279r 1               ;
000279r 1               ; i = i+1 >= sizeof(eyescos) ? 0 : i+1;
000279r 1               ;
000279r 1  A0 07        	ldy     #$07
00027Br 1  A2 00        	ldx     #$00
00027Dr 1  B1 rr        	lda     (sp),y
00027Fr 1  20 rr rr     	jsr     incax1
000282r 1  C9 B5        	cmp     #$B5
000284r 1  8A           	txa
000285r 1  E9 00        	sbc     #$00
000287r 1  A9 00        	lda     #$00
000289r 1  A2 00        	ldx     #$00
00028Br 1  2A           	rol     a
00028Cr 1  D0 03 4C rr  	jeq     L0238
000290r 1  rr           
000291r 1  A2 00        	ldx     #$00
000293r 1  A9 00        	lda     #$00
000295r 1  4C rr rr     	jmp     L023A
000298r 1  A0 07        L0238:	ldy     #$07
00029Ar 1  A2 00        	ldx     #$00
00029Cr 1  B1 rr        	lda     (sp),y
00029Er 1  20 rr rr     	jsr     incax1
0002A1r 1  A2 00        L023A:	ldx     #$00
0002A3r 1  A0 07        	ldy     #$07
0002A5r 1  91 rr        	sta     (sp),y
0002A7r 1               ;
0002A7r 1               ; i2 = i2+1 >= sizeof(eyescos) ? 0 : i2+1;
0002A7r 1               ;
0002A7r 1  A0 06        	ldy     #$06
0002A9r 1  A2 00        	ldx     #$00
0002ABr 1  B1 rr        	lda     (sp),y
0002ADr 1  20 rr rr     	jsr     incax1
0002B0r 1  C9 B5        	cmp     #$B5
0002B2r 1  8A           	txa
0002B3r 1  E9 00        	sbc     #$00
0002B5r 1  A9 00        	lda     #$00
0002B7r 1  A2 00        	ldx     #$00
0002B9r 1  2A           	rol     a
0002BAr 1  D0 03 4C rr  	jeq     L023F
0002BEr 1  rr           
0002BFr 1  A2 00        	ldx     #$00
0002C1r 1  A9 00        	lda     #$00
0002C3r 1  4C rr rr     	jmp     L0241
0002C6r 1  A0 06        L023F:	ldy     #$06
0002C8r 1  A2 00        	ldx     #$00
0002CAr 1  B1 rr        	lda     (sp),y
0002CCr 1  20 rr rr     	jsr     incax1
0002CFr 1  A2 00        L0241:	ldx     #$00
0002D1r 1  A0 06        	ldy     #$06
0002D3r 1  91 rr        	sta     (sp),y
0002D5r 1               ;
0002D5r 1               ; j = j+1 >= sizeof(eyessin) ? 0 : j+1;
0002D5r 1               ;
0002D5r 1  A0 05        	ldy     #$05
0002D7r 1  A2 00        	ldx     #$00
0002D9r 1  B1 rr        	lda     (sp),y
0002DBr 1  20 rr rr     	jsr     incax1
0002DEr 1  C9 DC        	cmp     #$DC
0002E0r 1  8A           	txa
0002E1r 1  E9 00        	sbc     #$00
0002E3r 1  A9 00        	lda     #$00
0002E5r 1  A2 00        	ldx     #$00
0002E7r 1  2A           	rol     a
0002E8r 1  D0 03 4C rr  	jeq     L0246
0002ECr 1  rr           
0002EDr 1  A2 00        	ldx     #$00
0002EFr 1  A9 00        	lda     #$00
0002F1r 1  4C rr rr     	jmp     L0248
0002F4r 1  A0 05        L0246:	ldy     #$05
0002F6r 1  A2 00        	ldx     #$00
0002F8r 1  B1 rr        	lda     (sp),y
0002FAr 1  20 rr rr     	jsr     incax1
0002FDr 1  A2 00        L0248:	ldx     #$00
0002FFr 1  A0 05        	ldy     #$05
000301r 1  91 rr        	sta     (sp),y
000303r 1               ;
000303r 1               ; j2 = j2+1 >= sizeof(eyessin) ? 0 : j2+1;
000303r 1               ;
000303r 1  A0 04        	ldy     #$04
000305r 1  A2 00        	ldx     #$00
000307r 1  B1 rr        	lda     (sp),y
000309r 1  20 rr rr     	jsr     incax1
00030Cr 1  C9 DC        	cmp     #$DC
00030Er 1  8A           	txa
00030Fr 1  E9 00        	sbc     #$00
000311r 1  A9 00        	lda     #$00
000313r 1  A2 00        	ldx     #$00
000315r 1  2A           	rol     a
000316r 1  D0 03 4C rr  	jeq     L024D
00031Ar 1  rr           
00031Br 1  A2 00        	ldx     #$00
00031Dr 1  A9 00        	lda     #$00
00031Fr 1  4C rr rr     	jmp     L024F
000322r 1  A0 04        L024D:	ldy     #$04
000324r 1  A2 00        	ldx     #$00
000326r 1  B1 rr        	lda     (sp),y
000328r 1  20 rr rr     	jsr     incax1
00032Br 1  A2 00        L024F:	ldx     #$00
00032Dr 1  A0 04        	ldy     #$04
00032Fr 1  91 rr        	sta     (sp),y
000331r 1               ;
000331r 1               ; for(k=0; k<DURATION; k++) {
000331r 1               ;
000331r 1  A0 01        	ldy     #$01
000333r 1  20 rr rr     	jsr     ldaxysp
000336r 1  85 rr        	sta     regsave
000338r 1  86 rr        	stx     regsave+1
00033Ar 1  20 rr rr     	jsr     incax1
00033Dr 1  A0 00        	ldy     #$00
00033Fr 1  20 rr rr     	jsr     staxysp
000342r 1  A5 rr        	lda     regsave
000344r 1  A6 rr        	ldx     regsave+1
000346r 1  4C rr rr     	jmp     L01FE
000349r 1               ;
000349r 1               ; }
000349r 1               ;
000349r 1  20 rr rr     L01FF:	jsr     incsp8
00034Cr 1  60           	rts
00034Dr 1               
00034Dr 1               .endproc
00034Dr 1               
00034Dr 1               
