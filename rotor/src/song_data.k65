/*
 * TIATracker music player
 * Copyright 2016 Andre "Kylearan" Wichmann
 * Website: https://bitbucket.org/kylearan/tiatracker
 * Email: andre.wichmann@gmx.de
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Song author: Glafouk
 * Song name: Beside
 */

 
 /* =====================================================================
 * Flags
 * =====================================================================
 */
[
    // duration (number of TV frames) of a note
    TT_SPEED                = 3,
    // duration of odd frames (needs TT_USE_FUNKTEMPO)
    TT_ODD_SPEED            = 3,

    // 1: Overlay percussion, +40 bytes
    TT_USE_OVERLAY          = 0,
    // 1: Melodic instrument slide, +9 bytes
    TT_USE_SLIDE            = 0,
    // 1: Goto pattern, +8 bytes
    TT_USE_GOTO             = 1,
    // 1: Odd/even rows have different SPEED values, +7 bytes
    TT_USE_FUNKTEMPO        = 0,
    // If the very first notes played on each channel are not PAUSE, HOLD or
    // SLIDE, i.e. if they start with an instrument or percussion, then set
    // this flag to 0 to save 2 bytes.
    // 0: +2 bytes
    TT_STARTS_WITH_NOTES    = 0
]


/* =====================================================================
 * Permanent variables. These are states needed by the player.
 * =====================================================================
 */
var tt_timer=0xf4,          // current music timer value
    tt_cur_pat_index[2],    // current pattern index into tt_SequenceTable
    tt_cur_note_index[2],   // note index into current pattern
    tt_envelope_index[2],   // index into ADSR envelope
    tt_cur_ins[2];          // current instrument


/* =====================================================================
 * Temporary variables. These will be overwritten during a call to the
 * player routine, but can be used between calls for other things.
 * =====================================================================
 */
#if TT_USE_OVERLAY
var tt_ptr[2]=0xf0; // keep enough space on stack for 1 function call with TT_USE_OVERLAY
#else
var tt_ptr[2]=0xf2;
#endif


/* =====================================================================
 * Initialize music.
 * Set tt_cur_pat_index[2] to the indexes of the first patterns from
 * tt_SequenceTable for each channel.
 * Set tt_timer and tt_cur_note_index[2] to 0.
 * All other variables can start with any value.
 * =====================================================================
 */
inline tt_init {
    tt_cur_pat_index=a=0
    tt_cur_pat_index+1=a=43
    // the rest should be 0 already from startup code. If not,
    // set the following variables to 0 manually:
    // - tt_timer
    // - tt_cur_pat_index[2]
    // - tt_cur_note_index[2]
}


/*
 * =====================================================================
 * TIATracker melodic and percussion instruments, patterns and sequencer
 * data.
 * =====================================================================
 */

/*
 * =====================================================================
 * Melodic instrument definitions (up to 7). tt_envelope_index holds
 * the index values into these tables for the current instruments played
 * in channel 0 and 1.
 *
 * Each instrument is defined by:
 * - tt_InsCtrlTable: the AUDC value
 * - tt_InsADIndexes: the index of the start of the ADSR envelope as
 *      defined in tt_InsFreqVolTable
 * - tt_InsSustainIndexes: the index of the start of the Sustain phase
 *      of the envelope
 * - tt_InsReleaseIndexes: the index of the start of the Release phase
 * - tt_InsFreqVolTable: The AUDF frequency and AUDV volume values of
 *      the envelope
 * =====================================================================
 */

// Instrument master CTRL values
data tt_InsCtrlTable {
        0x04 0x0c 0x04 0x0c 0x06

}

// Instrument Attack/Decay start indexes into ADSR tables.
data tt_InsADIndexes {
        0x00 0x00 0x0d 0x0d 0x12

}

// Instrument Sustain start indexes into ADSR tables
data tt_InsSustainIndexes {
        0x09 0x09 0x0d 0x0d 0x18

}

// Instrument Release start indexes into ADSR tables
// Caution: Values are stored with an implicit -1 modifier! To get the
// real index, add 1.
data tt_InsReleaseIndexes {
        0x0a 0x0a 0x0e 0x0e 0x19

}

// AUDVx and AUDFx ADSR envelope values.
// Each byte encodes the frequency and volume:
// - Bits 7..4: Freqency modifier for the current note ([-8..7]),
//       8 means no change. Bit 7 is the sign bit.
// - Bits 3..0: Volume
// Between sustain and release is one byte that is not used and
// can be any value.
// The end of the release phase is encoded by a 0.
data tt_InsFreqVolTable {
// 0+1: Sine
        0x80 0x87 0x87 0x86 0x85 0x84 0x83 0x82
        0x81 0x80 0x00 0x80 0x00
// 2+3: SineLow
        0x82 0x00 0x82 0x82 0x00
// 4: bassline
        0x8f 0x8d 0x8b 0x89 0x87 0x85 0x80 0x00
        0x80 0x00

}


/*
 * =====================================================================
 * Percussion instrument definitions (up to 15)
 * 
 * Each percussion instrument is defined by:
 * - tt_PercIndexes: The index of the first percussion frame as defined
 *      in tt_PercFreqTable and tt_PercCtrlVolTable
 * - tt_PercFreqTable: The AUDF frequency value
 * - tt_PercCtrlVolTable: The AUDV volume and AUDC values
 * =====================================================================
 */

// Indexes into percussion definitions signifying the first frame for
// each percussion in tt_PercFreqTable.
// Caution: Values are stored with an implicit +1 modifier! To get the
// real index, subtract 1.
data tt_PercIndexes {
        0x01 0x12

}

// The AUDF frequency values for the percussion instruments.
// If the second to last value is negative (>=128), it means it's an
// "overlay" percussion, i.e. the player fetches the next instrument note
// immediately and starts it in the sustain phase next frame. (Needs
// TT_USE_OVERLAY)
data tt_PercFreqTable {
// 0: Chloump1
        0x0a 0x0a 0x0b 0x0b 0x0c 0x0c 0x0d 0x0d
        0x0e 0x0e 0x0f 0x10 0x10 0x12 0x12 0x15
        0x00
// 1: Chloump2
        0x05 0x05 0x07 0x08 0x08 0x09 0x0b 0x0b
        0x0c 0x0e 0x0f 0x0f 0x10 0x10 0x11 0x11
        0x00

}

// The AUDCx and AUDVx volume values for the percussion instruments.
// - Bits 7..4: AUDC value
// - Bits 3..0: AUDV value
// 0 means end of percussion data.
data tt_PercCtrlVolTable {
// 0: Chloump1
        0x8a 0x8a 0x89 0x89 0x88 0x88 0x88 0x87
        0x86 0x85 0x84 0x83 0x82 0x81 0x80 0x80
        0x00
// 1: Chloump2
        0x8a 0x8a 0x89 0x89 0x88 0x88 0x88 0x87
        0x87 0x87 0x86 0x86 0x85 0x84 0x82 0x80
        0x00

}

        
/*
 * =====================================================================
 * Track definition
 * The track is defined by:
 * - tt_PatternX (X=0, 1, ...): Pattern definitions
 * - tt_PatternPtrLo/Hi: Pointers to the tt_PatternX tables, serving
 *      as index values
 * - tt_SequenceTable: The order in which the patterns should be played,
 *      i.e. indexes into tt_PatternPtrLo/Hi. Contains the sequences
 *      for all channels and sub-tracks. The variables tt_cur_pat_index
 *      hold an index into tt_SequenceTable for each channel.
 *
 * So tt_SequenceTable holds indexes into tt_PatternPtrLo/Hi, which
 * in turn point to pattern definitions (tt_PatternX) in which the notes
 * to play are specified.
 * =====================================================================
 */

/*
 * =====================================================================
 * Pattern definitions, one table per pattern. tt_cur_note_index
 * holds the index values into these tables for the current pattern
 * played in channel 0 and 1.
 * 
 * A pattern is a sequence of notes (one byte per note) ending with a 0.
 * A note can be either:
 * - Pause: Put melodic instrument into release. Must only follow a
 *      melodic instrument.
 * - Hold: Continue to play last note (or silence). Default "empty" note.
 * - Slide (needs TT_USE_SLIDE): Adjust frequency of last melodic note
 *      by -7..+7 and keep playing it
 * - Play new note with melodic instrument
 * - Play new note with percussion instrument
 * - End of pattern
 * 
 * A note is defined by:
 * - Bits 7..5: 1-7 means play melodic instrument 1-7 with a new note
 *      and frequency in bits 4..0. If bits 7..5 are 0, bits 4..0 are
 *      defined as:
 *      - 0: End of pattern
 *      - [1..15]: Slide -7..+7 (needs TT_USE_SLIDE)
 *      - 8: Hold
 *      - 16: Pause
 *      - [17..31]: Play percussion instrument 1..15
 * 
 * The tracker must ensure that a pause only follows a melodic
 * instrument or a hold/slide.
 * =====================================================================
 */
[
    TT_FREQ_MASK    = 31,
    TT_INS_HOLD     = 8,
    TT_INS_PAUSE    = 16
]

// mel0
data tt_pattern0 {
        0x51 0x08 0x4e 0x08 0x3a 0x08 0x36 0x08
        0x51 0x08 0x4e 0x08 0x3a 0x08 0x36 0x08
        0x51 0x08 0x4e 0x08 0x3a 0x08 0x36 0x08
        0x51 0x08 0x4e 0x08 0x3a 0x08 0x36 0x08
        0x51 0x08 0x4e 0x08 0x37 0x08 0x3a 0x08
        0x51 0x08 0x4e 0x08 0x37 0x08 0x3a 0x08
        0x51 0x08 0x4e 0x08 0x37 0x08 0x3a 0x08
        0x51 0x08 0x4e 0x08 0x37 0x08 0x3d 0x08
        0x00

}
// mel1
data tt_pattern1 {
        0x53 0x08 0x4f 0x08 0x3d 0x08 0x37 0x08
        0x53 0x08 0x4f 0x08 0x3d 0x08 0x37 0x08
        0x53 0x08 0x4f 0x08 0x3d 0x08 0x37 0x08
        0x53 0x08 0x4f 0x08 0x3d 0x08 0x37 0x08
        0x53 0x08 0x4f 0x08 0x37 0x08 0x3d 0x08
        0x53 0x08 0x4f 0x08 0x37 0x08 0x3d 0x08
        0x53 0x08 0x4f 0x08 0x37 0x08 0x3d 0x08
        0x53 0x08 0x4f 0x08 0x37 0x08 0x3a 0x08
        0x00

}
// mel2
data tt_pattern2 {
        0x51 0x7a 0x51 0x7a 0x51 0x7a 0x51 0x7a
        0x51 0x7a 0x51 0x7a 0x51 0x7a 0x51 0x7a
        0x51 0x7a 0x51 0x7a 0x51 0x7a 0x51 0x7a
        0x4e 0x76 0x4e 0x76 0x4c 0x73 0x4c 0x73
        0x4b 0x71 0x4b 0x71 0x4b 0x71 0x4b 0x71
        0x4b 0x71 0x4b 0x71 0x4b 0x71 0x4b 0x71
        0x4b 0x71 0x4b 0x71 0x4b 0x71 0x4b 0x71
        0x4b 0x71 0x4e 0x76 0x4c 0x73 0x4c 0x73
        0x00

}
// mel3
data tt_pattern3 {
        0x4f 0x77 0x4f 0x77 0x4f 0x77 0x4f 0x77
        0x4f 0x77 0x4f 0x77 0x4f 0x77 0x4f 0x77
        0x4f 0x77 0x4f 0x77 0x51 0x7a 0x51 0x7a
        0x51 0x7a 0x51 0x7a 0x51 0x7a 0x51 0x7a
        0x4f 0x77 0x4f 0x77 0x4f 0x77 0x4f 0x77
        0x4f 0x77 0x4f 0x77 0x4f 0x77 0x4f 0x77
        0x4f 0x77 0x4f 0x77 0x4e 0x76 0x4e 0x76
        0x4e 0x76 0x4e 0x76 0x4e 0x76 0x4e 0x76
        0x00

}
// mel4
data tt_pattern4 {
        0x51 0x7a 0x51 0x7a 0x51 0x7a 0x51 0x7a
        0x4e 0x76 0x4e 0x76 0x4e 0x76 0x4e 0x76
        0x4b 0x71 0x4b 0x71 0x4b 0x71 0x4b 0x71
        0x3d 0x7d 0x3d 0x7d 0x3a 0x7a 0x3a 0x7a
        0x3a 0x7a 0x3a 0x7a 0x3a 0x7a 0x3a 0x7a
        0x3a 0x7a 0x3a 0x7a 0x3d 0x7d 0x3d 0x7d
        0x3a 0x7a 0x3a 0x7a 0x3d 0x7d 0x3d 0x7d
        0x3a 0x7a 0x3a 0x7a 0x3d 0x7d 0x3d 0x7d
        0x00

}
// mel5
data tt_pattern5 {
        0x3d 0x7d 0x3d 0x7d 0x3d 0x7d 0x3d 0x7d
        0x3d 0x7d 0x3d 0x7d 0x3d 0x7d 0x3d 0x7d
        0x3d 0x7d 0x3d 0x7d 0x3d 0x7d 0x3d 0x7d
        0x4b 0x8b 0x4b 0x8b 0x3d 0x7d 0x3d 0x7d
        0x36 0x76 0x36 0x76 0x36 0x76 0x36 0x76
        0x37 0x77 0x37 0x77 0x37 0x77 0x37 0x77
        0x3a 0x7a 0x3a 0x7a 0x3a 0x7a 0x3a 0x7a
        0x3d 0x7d 0x3d 0x7d 0x51 0x7a 0x51 0x7a
        0x00

}
// mel0_b
data tt_pattern6 {
        0x51 0x7a 0x4e 0x76 0x3a 0x7a 0x36 0x76
        0x51 0x7a 0x4e 0x76 0x3a 0x7a 0x36 0x76
        0x51 0x7a 0x4e 0x76 0x3a 0x7a 0x36 0x76
        0x51 0x7a 0x4e 0x76 0x3a 0x7a 0x36 0x76
        0x51 0x7a 0x4e 0x76 0x37 0x6b 0x3a 0x6e
        0x51 0x7a 0x4e 0x76 0x37 0x6b 0x3a 0x6e
        0x51 0x7a 0x4e 0x76 0x37 0x6b 0x3a 0x6e
        0x51 0x7a 0x4e 0x76 0x37 0x6b 0x3d 0x6e
        0x00

}
// mel1_b
data tt_pattern7 {
        0x53 0x7d 0x4f 0x77 0x3d 0x7d 0x37 0x77
        0x53 0x7d 0x4f 0x77 0x3d 0x6e 0x37 0x6b
        0x53 0x7d 0x4f 0x77 0x3d 0x6e 0x37 0x6b
        0x53 0x7d 0x4f 0x77 0x3d 0x6e 0x37 0x6b
        0x53 0x7d 0x4f 0x77 0x37 0x6b 0x3d 0x6e
        0x53 0x7d 0x4f 0x77 0x37 0x6b 0x3d 0x6e
        0x53 0x7d 0x4f 0x77 0x37 0x6b 0x3d 0x6e
        0x53 0x7d 0x4f 0x77 0x37 0x6b 0x3a 0x6e
        0x00

}
// mel6
data tt_pattern8 {
        0x3a 0x7a 0x3a 0x7a 0x3a 0x7a 0x3a 0x7a
        0x31 0x71 0x31 0x71 0x31 0x71 0x31 0x71
        0x36 0x76 0x36 0x76 0x36 0x76 0x36 0x76
        0x33 0x73 0x33 0x73 0x33 0x73 0x33 0x73
        0x3a 0x7a 0x3a 0x7a 0x3d 0x7d 0x3d 0x7d
        0x3a 0x7a 0x3a 0x7a 0x36 0x76 0x36 0x76
        0x3a 0x7a 0x3a 0x7a 0x3d 0x7d 0x3d 0x7d
        0x3a 0x7a 0x3a 0x7a 0x36 0x76 0x36 0x76
        0x00

}
// mel7
data tt_pattern9 {
        0x3a 0x7a 0x3a 0x7a 0x3a 0x7a 0x3a 0x7a
        0x31 0x71 0x31 0x71 0x31 0x71 0x31 0x71
        0x36 0x76 0x36 0x76 0x36 0x76 0x36 0x76
        0x33 0x73 0x33 0x73 0x33 0x73 0x33 0x73
        0x3a 0x7a 0x3a 0x7a 0x3d 0x7d 0x3d 0x7d
        0x3a 0x7a 0x3a 0x7a 0x36 0x76 0x36 0x76
        0x3a 0x7a 0x3a 0x7a 0x3d 0x7d 0x3d 0x7d
        0x3a 0x7a 0x3a 0x7a 0x33 0x73 0x33 0x73
        0x00

}
// mel8
data tt_pattern10 {
        0x3a 0x7a 0x33 0x73 0x36 0x76 0x36 0x76
        0x33 0x73 0x33 0x73 0x3a 0x7a 0x3a 0x7a
        0x33 0x73 0x33 0x73 0x36 0x76 0x36 0x76
        0x33 0x73 0x33 0x73 0x31 0x71 0x31 0x71
        0x37 0x77 0x37 0x77 0x37 0x77 0x37 0x77
        0x36 0x76 0x36 0x76 0x36 0x76 0x36 0x76
        0x33 0x73 0x33 0x73 0x37 0x77 0x37 0x77
        0x33 0x73 0x33 0x73 0x3a 0x7a 0x3a 0x7a
        0x00

}
// mel9
data tt_pattern11 {
        0x33 0x73 0x33 0x73 0x36 0x76 0x36 0x76
        0x33 0x73 0x33 0x73 0x3a 0x7a 0x3a 0x7a
        0x33 0x73 0x33 0x73 0x36 0x76 0x36 0x76
        0x33 0x73 0x33 0x73 0x31 0x71 0x31 0x71
        0x37 0x77 0x37 0x77 0x37 0x77 0x37 0x77
        0x36 0x76 0x36 0x76 0x36 0x76 0x36 0x76
        0x37 0x77 0x37 0x77 0x3d 0x7d 0x3d 0x7d
        0x31 0x71 0x31 0x71 0x3d 0x7d 0x3d 0x7d
        0x00

}
// drum0
data tt_pattern12 {
        0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
        0x11 0x08 0x08 0x08 0x08 0x08 0x08 0x08
        0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0x08 0x08
        0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
        0x11 0x08 0x08 0x08 0x08 0x08 0x08 0x08
        0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0x08 0x08
        0x00

}
// bass+drum0
data tt_pattern13 {
        0xad 0x08 0xad 0x08 0xad 0x08 0xad 0x08
        0x11 0x08 0x08 0x08 0xad 0x08 0xad 0x08
        0xaf 0x08 0xaf 0x08 0xad 0x08 0x08 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0x08 0x08
        0xad 0x08 0xad 0x08 0xad 0x08 0xad 0x08
        0x11 0x08 0x08 0x08 0xad 0x08 0xad 0x08
        0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0x08 0x08
        0x00

}
// bass+drum1
data tt_pattern14 {
        0xad 0x08 0xad 0x08 0xad 0x08 0xad 0x08
        0x11 0x08 0x08 0x08 0xad 0x08 0xad 0x08
        0xaf 0x08 0xaf 0x08 0xad 0x08 0xad 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0x08 0x08
        0xad 0x08 0xad 0x08 0xad 0x08 0xad 0x08
        0x11 0x08 0x08 0x08 0xad 0x08 0xad 0x08
        0xaf 0x08 0xaf 0x08 0xad 0x08 0xad 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0xad 0x08
        0x00

}
// bass+drum2
data tt_pattern15 {
        0xaf 0x08 0xaf 0x08 0xaf 0x08 0xaf 0x08
        0x11 0x08 0x08 0x08 0xaf 0x08 0xaf 0x08
        0xb1 0x08 0xb1 0x08 0xaf 0x08 0xaf 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0x08 0x08
        0xaf 0x08 0xaf 0x08 0xaf 0x08 0xaf 0x08
        0x11 0x08 0x08 0x08 0xaf 0x08 0xaf 0x08
        0xb1 0x08 0xb1 0x08 0xaf 0x08 0xaf 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0xaf 0x08
        0x00

}
// bass+drum3
data tt_pattern16 {
        0xb4 0x08 0xb4 0x08 0xb4 0x08 0xb4 0x08
        0x11 0x08 0x08 0x08 0xb4 0x08 0xb4 0x08
        0xb6 0x08 0xb6 0x08 0xb4 0x08 0xb4 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0x08 0x08
        0xb4 0x08 0xb4 0x08 0xb4 0x08 0xb4 0x08
        0x11 0x08 0x08 0x08 0xb4 0x08 0xb4 0x08
        0xb6 0x08 0xb6 0x08 0xb4 0x08 0xb4 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0xb4 0x08
        0x00

}
// bass+drum4
data tt_pattern17 {
        0xaf 0x08 0xaf 0x08 0xaf 0x08 0xaf 0x08
        0x11 0x08 0x08 0x08 0xaf 0x08 0xaf 0x08
        0xb1 0x08 0xb1 0x08 0xaf 0x08 0xaf 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0x08 0x08
        0xaf 0x08 0xaf 0x08 0xaf 0x08 0xaf 0x08
        0x11 0x08 0x08 0x08 0xaf 0x08 0xaf 0x08
        0xb1 0x08 0xb1 0x08 0xaf 0x08 0xaf 0x08
        0x12 0x08 0x08 0x08 0x11 0x08 0xad 0x08
        0x00

}



/*
 * =====================================================================
 * Pattern pointers look-up table.
 * =====================================================================
 */
data tt_PatternPtrLo {
        &<tt_pattern0 &<tt_pattern1 &<tt_pattern2 &<tt_pattern3
        &<tt_pattern4 &<tt_pattern5 &<tt_pattern6 &<tt_pattern7
        &<tt_pattern8 &<tt_pattern9 &<tt_pattern10 &<tt_pattern11
        &<tt_pattern12 &<tt_pattern13 &<tt_pattern14 &<tt_pattern15
        &<tt_pattern16 &<tt_pattern17
}
data tt_PatternPtrHi {
        &>tt_pattern0 &>tt_pattern1 &>tt_pattern2 &>tt_pattern3
        &>tt_pattern4 &>tt_pattern5 &>tt_pattern6 &>tt_pattern7
        &>tt_pattern8 &>tt_pattern9 &>tt_pattern10 &>tt_pattern11
        &>tt_pattern12 &>tt_pattern13 &>tt_pattern14 &>tt_pattern15
        &>tt_pattern16 &>tt_pattern17        
}


/*
 * =====================================================================
 * Pattern sequence table. Each byte is an index into the
 * tt_PatternPtrLo/Hi tables where the pointers to the pattern
 * definitions can be found. When a pattern has been played completely,
 * the next byte from this table is used to get the address of the next
 * pattern to play. tt_cur_pat_index_c0/1 hold the current index values
 * into this table for channels 0 and 1.
 * If TT_USE_GOTO is used, a value >=128 denotes a goto to the pattern
 * number encoded in bits 6..0 (i.e. value AND %01111111).
 * =====================================================================
 */
data tt_SequenceTable {
    // ---------- Channel 0 ----------
        0x00 0x01 0x00 0x01 0x00 0x01 0x00 0x01
        0x00 0x01 0x00 0x01 0x00 0x01 0x02 0x03
        0x02 0x03 0x04 0x05 0x04 0x05 0x06 0x07
        0x06 0x07 0x06 0x07 0x06 0x07 0x08 0x09
        0x08 0x09 0x0a 0x0b 0x0a 0x0b 0x06 0x07
        0x06 0x07 0x86

        
    // ---------- Channel 1 ----------
        0x0c 0x0c 0x0d 0x0d 0x0d 0x0d 0x0e 0x0f
        0x10 0x11 0x0e 0x0f 0x10 0x11 0x0e 0x0f
        0x10 0x11 0x0e 0x0f 0x10 0x11 0x0e 0x0f
        0x10 0x11 0x0e 0x0f 0x10 0x11 0x0e 0x0f
        0x10 0x11 0x0e 0x0f 0x10 0x11 0x0c 0x0c
        0x0d 0x0d 0xb1

}
